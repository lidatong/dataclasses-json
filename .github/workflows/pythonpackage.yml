name: test-and-release

on:
  push:
    branches: 
      - master
      - release/*  # this is a backup. prefer publishing using a tagged master.
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: 
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        # https://github.com/actions/python-versions/blob/main/versions-manifest.json
        python-version: [3.7, 3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry and dependencies
      run: |
        set -e
        
        curl -sSL https://install.python-poetry.org | python3 -
        poetry install --all-extras
    - name: Lint with flake8
      run: |
        set -e
        poetry run flake8 dataclasses_json --show-source --statistics --count
    - name: Test with pytest
      run: |
        set -euxo pipefail    
        
        poetry run pytest ./tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=term-missing:skip-covered | tee pytest-coverage.txt
    - name: Publish Code Coverage
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./junit/test-results.xml


  release:
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.x"
      - name: Install Poetry and Prepare version
        run:
          set -e
          
          curl -sSL https://install.python-poetry.org | python3 -
          
          version=$(git describe --tags --abbrev=7)
          sed -i "s/version = \"0.0.0\"/version = \"${version:1}\"/" pyproject.toml
          echo "__version__ = '${version:1}'" > ./dataclasses_json/_version.py
      - name: Publish distribution ðŸ“¦ to Test PyPI
        run:
          set -e
          
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry build && poetry publish -r test-pypi
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        run:
          set -e
          
          poetry build && poetry publish
